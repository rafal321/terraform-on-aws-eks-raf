apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deploy
  labels:
    app: nginx
spec:
  replicas: 10
  revisionHistoryLimit: 1
  strategy:
    rollingUpdate:
      maxSurge: 10%
      maxUnavailable: 10%
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: therafk/httpd:0.2 # nginx:latest
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: "200m"
            memory: "256Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
        readinessProbe:
          httpGet:
            path: / # Path to check for readiness
            port: 80 # Port to check for readiness
          initialDelaySeconds: 5 # Simulate long startup time
          periodSeconds: 10 # How often to perform the readiness check
          failureThreshold: 3 # Number of consecutive failures before marking the pod as not ready
          successThreshold: 1 # Number of consecutive successes before marking the pod as ready
        livenessProbe: # it restarts the pod if it breaks later on during it's lifetime
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 60
          failureThreshold: 6
          successThreshold: 1

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-svc
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80 # The port the service will listen on
      targetPort: 80 # The port on the pod that the service will forward to
  type: ClusterIP # You can change this to NodePort or LoadBalancer depending on your needs
---
apiVersion: v1
kind: Pod
metadata:
  name: curl-pod
  labels:
    app: curl-pod-label
spec:
  containers:
  - name: curl
    image: curlimages/curl:latest # A lightweight image with curl pre-installed
    command: ["sleep", "infinity"] # Keep the pod running for a while so you can exec into it
    resources: {}
  restartPolicy: Never # Ensures the pod doesn't restart automatically after command finishes (if using a different command)


# kubectl exec -it curl-pod -- sh
# while true; do sleep 1; curl -s http://nginx-svc/ | grep "ver:" | xargs -I {} date "+%F %T {}"; done

# curl https://api.coinbase.com/v2/prices/BTC-EUR/buy

---
apiVersion: v1
kind: Pod
metadata:
  name: net-tools1
  labels:
    app: net-tools1
spec:
  containers:
  - name: net-tools-container
    image: donch/net-tools
    resources:
      limits:
        cpu: "200m"
        memory: "256Mi"
      requests:
        cpu: "100m"
        memory: "128Mi"
    volumeMounts:
    - name: scripts-volume
      mountPath: /home
  volumes:
  - name: scripts-volume
    configMap:
      name: curl-loop-script
      defaultMode: 0744
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: curl-loop-script
data:
  # The key 'curl_loop.sh' will become the filename in the pod.
  curl_loop.sh: |
    #!/bin/sh
    SITE="google.com"
    TIME_DELAY=3
    while :
    do
      response_time=$(curl -Ls -w "%{time_total}" "$SITE" -o /dev/null)
    # title_tag=$(curl -Ls "$SITE" | grep -o -P "<title>.*?</title>") # Raf: might not work in BusyBox
      title_tag=$(curl -Ls "$SITE" | sed -n 's/.*<title>\(.*\)<\/title>.*/<title>\1<\/title>/p') # BusyBox version
      echo "Total Time: ${response_time}s ${title_tag}"
      sleep "$TIME_DELAY"
    done
    EOF
    chmod 744 curl_loop.sh